openapi: 3.0.0
info:
  title: Umbby API
  description: >
    Umbby is a group creation and management tool, where members can organize groups and
    sub groups and can schedule meetings, take roll, collect dues, etc.
  version: 1.0.0
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: 'https://api.umbby.com'

paths:
  # Groups

  /groups:
    post:
      summary: Create group.
      operationId: createGroup
      tags:
        - Groups
      requestBody:
        description: Group to create. ID field must be NULL or will result in an error.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        201:
          description: The group was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
        400:
          description: The submitted group is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update existing group.
      operationId: updateGroup
      tags:
        - Groups
      requestBody:
        description: The group to update. ID field cannot be NULL or will result in an error.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupResponse'
      responses:
        200:
          description: Group update results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
        400:
          description: The submitted group is invalid.
        404:
          description: Unable to update group

    get:
      summary: Get a list of groups.
      operationId: getGroupList
      tags:
        - Groups
      parameters:
        - name: q
          in: query
          description: >
            Query string to be used for searching. Will search within all name and description
            fields. Query matches will be anywhere within the string.
          required: false
          schema:
            type: string

        - name: type
          in: query
          description: >
            Specifies the type of groups to return. By default, it returns active groups.
          schema:
            type: string
            enum:
              - all
              - active
              - owners
              - auditors
              - members
              - inactive

        - name: limit
          in: query
          description: >
            The maximum number of records to return. Default is configured at
            the application level.
          required: false
          schema:
            type: integer

        - name: after_id
          in: query
          description: >
            The starting point for the search set. If field is omitted, then the set
            starts at the first matching member.
          required: false
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'

  /groups/{id}:
    get:
      summary: Get a group by its ID.
      operationId: getGroupById
      tags:
        - Groups
      parameters:
        - name: id
          in: path
          description: Group ID
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        404:
          description: Not found

    delete:
      summary: Deactivate a specified group
      description: >
        Deactivates a group, making it no longer accessible. Group data is not deleted and
        the group can be reactivated. This will also deactivate any group member records
        but will not deactivate the member accounts.
      operationId: deleteGroup
      tags:
        - Groups
      parameters:
        - name: id
          in: path
          description: Group ID
          required: true
          schema:
            type: integer
      responses:
        200:
          description: The specified group successfully deactivated.
        404:
          description: Unable to find the specified group.

  # Group Members

  /groups/{id}/members:
    post:
      summary: Add a set of members to a group.
      operationId: addGroupMembers
      tags:
        - Group Members
      parameters:
          - name: id
            in: path
            description: Group ID
            required: true
            schema:
              type: integer
      requestBody:
        description: The members to add to a group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMembers'
      responses:
        200:
          # TODO: Add details and return values of those that were added
          description: Members were successfully added to the group.
        400:
          # TODO: Add error messaging for what was bad in the request
          description: Bad request.
        404:
          # TODO: Add error messaging response with the group and/or user details that were not found
          description: Either the group or the users were not found.

    get:
      summary: Get members of a group.
      operationId: getGroupMembers
      description: >
        Retrieve a paged list of members of the group, based on search parameters.
        Default list will return a configured maximum number of entries.
      tags:
        - Group Members
      parameters:
        - name: id
          in: path
          description: Group ID
          required: true
          schema:
            type: integer

        - name: q
          in: query
          description: >
            Query string to be used for searching. Will search within all name and email
            address fields. Query matches will be anywhere within the string.
          required: false
          schema:
            type: string

        - name: type
          in: query
          description: Specifies the type of members to return. By default, it returns active members.
          schema:
            type: string
            enum:
              - all
              - active
              - owners
              - auditors
              - members
              - inactive

        - name: limit
          in: query
          description: >
            The maximum number of records to return. Default is configured at
            the application level.
          required: false
          schema:
            type: integer

        - name: after_id
          in: query
          description: >
            The starting point for the search set. If field is omitted, then the set
            starts at the first matching member.
          required: false
          schema:
            type: integer

      responses:
        200:
          description: Members meeting the search criteria
          content:
            application/json:
              schema:
                # TODO: Change this to search results object (HATEAOS)
                $ref: '#/components/schemas/GroupMembers'

  # TODO: Change this to a group request so more than one member account can be updated at once.
  /groups/{groupId}/members/{memberId}:
    put:
      summary: Update a member of a group.
      operationId: updateGroupMember
      tags:
        - Group Members
      parameters:
        - name: groupId
          in: path
          description: Group ID
          required: true
          schema:
            type: integer

        - name: memberId
          in: path
          description: Member ID
          required: true
          schema:
            type: integer
      requestBody:
        description: The members to add to a group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMember'
      responses:
        200:
          description: Group member updated successfully.
          content:
            application/json:
              schema:
                # TODO: Change object to include search result criteria (HATEAOS)
                $ref: '#/components/schemas/GroupMember'
        400:
          description: Group member update request was invalid.
        404:
          description: Unable to find specified group member.

    # TODO: Change this to a group delete
    delete:
      summary: Deactivate group member
      description: >
        Sets the status of a group member to inactive. Does not remove the record.
        Does not delete the member account.
      operationId: deactivateGroupMember
      tags:
        - Group Members
      parameters:
        - name: groupId
          in: path
          description: Group ID
          required: true
          schema:
            type: integer

        - name: memberId
          in: path
          description: Member ID
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Members were successfuly removed from the group.

  # Members

  /members:
    post:
      summary: Create a member account
      description: >
        Create one a member account and optionally add that account to specified groups.
        Member ID field must be blank.
      operationId: createMember
      tags:
        - Members
      requestBody:
        description: The member to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        201:
          description: The member was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberResponse'
        400:
          description: One or more of the submitted members was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Get a list of member accounts
      description: >
        Get a paged list of member accounts based on query criteria. If no query is
        specified, then returns the users alphabetically.
      operationId: getMembersList
      tags:
        - Members
      parameters:
        - name: q
          in: query
          description: >
            Query string to be used for searching. Will search within all name and email
            address fields.
          required: false
          schema:
            type: string

        - name: limit
          in: query
          description: >
            The maximum number of records to return. Default is configured at
            the application level.
          required: false
          schema:
            type: integer

        - name: after_id
          in: query
          description: >
            The starting point for the search set. If field is omitted, then the set
            starts at the first matching member.
          required: false
          schema:
            type: integer

        - name: groups
          in: query
          description: Include or omit member groups. Default is true.
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Search performed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberResponse'

  /members/{id}:
    get:
      summary: Get a member by its ID
      operationId: getMemberById
      tags:
        - Members
      parameters:
        - name: id
          in: path
          description: Member ID
          required: true
          schema:
            type: integer

        - name: groups
          in: query
          description: Include or omit member groups. Default is true.
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberResponse'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Update a member account
      description: >
        Updates specific properties for a single member account.
      operationId: updateMember
      tags:
        - Members
      requestBody:
        description: The member to update. Only fields that need to be updated are included.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        200:
          description: Member updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberResponse'
        400:
          description: One or more of the submitted members was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Deactivate a member account
      description: >
        Deactivates a member account and deactivates all its group memberships.
      operationId: deactivateMember
      tags:
        - Members
      parameters:
        - name: id
          in: path
          description: Member ID
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Member was deactivated.
        404:
          description: Member was not found.

components:
  schemas:
    Group:
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [ ACTIVE, INACTIVE ]
        dateCreated:
          type: string
          format: date-time
        createdBy:
          nullable: true
          $ref: '#/components/schemas/Member'
        dateDeleted:
          type: string
          format: date-time
          nullable: true

    GroupMember:
      type: object
      properties:
        member:
          $ref: '#/components/schemas/Member'
        groupOwner:
          type: boolean
        activeMember:
          type: boolean
        addedToGroup:
          type: string
          format: date-time
        removedFromGroup:
          type: string
          format: date-time

    GroupMembers:
      type: object
      properties:
        groupId:
          type: integer
        members:
          type: array
          items:
            $ref: '#/components/schemas/GroupMember'
        count:
          type: integer
        totalMembers:
          type: integer

    GroupResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Group'

    Member:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        status:
          type: string
          enum: [ ACTIVE, INACTIVE ]
        memberSince:
          type: string
          format: date-time
        inactiveSince:
          type: string
          format: date-time
        groups:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/MemberGroup'
      required:
        - email
        - status

    MemberGroup:
      type: object
      properties:
        groupId:
          type: integer
        group:
          nullable: true
          $ref: '#/components/schemas/Group'
        role:
          type: string
          enum:
            - MEMBER
            - OWNER
            - AUDITOR
        groupOwner:
          type: boolean
        activeMember:
          type: boolean
        addedToGroup:
          type: string
          format: date-time
        removedFromGroup:
          type: string
          format: date-time
      required:
        - groupId
        - group

    MemberResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Member'
        pagination:
          type: object
          $ref: '#/components/schemas/Pagination'

    Error:
      type: object
      properties:
        status:
          type: integer
        detail:
          type: string

    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'

    Pagination:
      type: object
      properties:
        first_id:
          type: integer
        last_id:
          type: integer
        limit:
          type: integer

